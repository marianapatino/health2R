[{"path":"/articles/01_import_apple_data.html","id":"importing-data","dir":"Articles","previous_headings":"","what":"Importing Data","title":"1. Import Apple Health Data","text":"Apple Health data stored large xml files can exported zip file, tens millions rows (e.g. many data types, health data logged stored second level). Therefore, import_healthdata import_workouts functions take exported zip file input parse R data format. Due large amount rows, can take several minutes, therefore done per updated health file, can subsequently stored rds csv file.","code":""},{"path":"/articles/01_import_apple_data.html","id":"importing-health-data","dir":"Articles","previous_headings":"Importing Data","what":"Importing Health Data","title":"1. Import Apple Health Data","text":"First, import, parse save example dataset health data. dynamic progress bar tracks progress parsing process.  get first overview, sample random subset 5 rows parsed data frame: parsing complete, store parsed file ´rds´ file:","code":"library(health2R)  parsed_healthdata <-    import_healthdata(filename = \"../dev/data/mp_export.zip\",                     datasource = \"apple\") parsed_healthdata %>%    sample_n(5) #> # A tibble: 5 × 9 #>   type                 sourceName sourceVersion unit  device startDate           #>   <chr>                <chr>      <chr>         <chr> <chr>  <dttm>              #> 1 HKQuantityTypeIdent… Mariana ’… 9.1           count <<HKD… 2022-12-18 07:51:12 #> 2 HKQuantityTypeIdent… Mariana ’… 9.3.1         count <<HKD… 2023-05-05 23:23:32 #> 3 HKQuantityTypeIdent… Mariana ’… 10.0          coun… <<HKD… 2023-10-03 09:06:01 #> 4 HKQuantityTypeIdent… Mariana ’… 9.5.1         kcal  <<HKD… 2023-06-20 16:07:06 #> 5 HKQuantityTypeIdent… Mariana ’… 9.6.1         kcal  <<HKD… 2023-08-26 15:01:33 #> # ℹ 3 more variables: endDate <dttm>, creationDate <dttm>, value <chr> saveRDS(parsed_healthdata,         \"../dev/data/parsed_healthdata_mp.rds\")"},{"path":"/articles/01_import_apple_data.html","id":"importing-workout-data","dir":"Articles","previous_headings":"Importing Data","what":"Importing Workout Data","title":"1. Import Apple Health Data","text":"Similarly, import_workouts function imports workouts list gpx data, name individual list entries route name.","code":"parsed_workouts <-    import_workouts(filename = \"../dev/data/mp_export.zip\",                   datasource = \"apple\")  saveRDS(parsed_workouts,         \"../dev/data/parsed_apple_workouts_mp.rds\") parsed_workouts[1:2] %>%   map(~ .x %>% head(5)) #> $`Route 2022-03-28 9:23pm` #> # A tibble: 5 × 8 #>     lat   lon   ele time                 speed course  hAcc  vAcc #>   <dbl> <dbl> <dbl> <dttm>               <dbl>  <dbl> <dbl> <dbl> #> 1  10.5 -84.8  633. 2022-03-28 17:54:24 0.689    46.3  1.75  1.74 #> 2  10.5 -84.8  633. 2022-03-28 17:54:25 0.714    50.0  1.56  1.53 #> 3  10.5 -84.8  634. 2022-03-28 17:54:26 0.355    43.9  1.47  1.36 #> 4  10.5 -84.8  634. 2022-03-28 17:54:27 0.146    23.7  1.43  1.23 #> 5  10.5 -84.8  634. 2022-03-28 17:54:28 0.0933  354.   1.42  1.12 #>  #> $`Route 2022-03-29 10:40pm` #> # A tibble: 5 × 8 #>     lat   lon   ele time                speed course  hAcc  vAcc #>   <dbl> <dbl> <dbl> <dttm>              <dbl>  <dbl> <dbl> <dbl> #> 1  10.7 -85.0  691. 2022-03-29 19:27:52 0.693   222.  1.78  1.71 #> 2  10.7 -85.0  691. 2022-03-29 19:27:53 0.597   220.  1.46  1.41 #> 3  10.7 -85.0  691. 2022-03-29 19:27:54 0.715   217.  1.41  1.32 #> 4  10.7 -85.0  691. 2022-03-29 19:27:55 0.769   209.  1.35  1.18 #> 5  10.7 -85.0  691. 2022-03-29 19:27:56 0.718   200.  1.32  1.08"},{"path":"/articles/01_import_apple_data.html","id":"initial-exploration","dir":"Articles","previous_headings":"","what":"Initial Exploration","title":"1. Import Apple Health Data","text":"parsed saved data rds files, can read analysed. full parsed file contains large number different variables data types, e.g. just 15 frequent ones example data set: Specialized functions pull analyse certain specific variables data types can found vignette(\"02_analyse_health_data\")","code":"parsed_healthdata <-    readRDS(file.path(\"PATH_TO_RDS/parsed_healthdata_mp.rds\"))  parsed_workouts <-    readRDS(file.path(\"PATH_TO_RDS/parsed_apple_workouts_mp.rds\")) parsed_healthdata$type %>% table() %>% sort(decreasing = TRUE) %>% head(15) #> . #>             HKQuantityTypeIdentifierActiveEnergyBurned  #>                                                 557636  #>                      HKQuantityTypeIdentifierHeartRate  #>                                                 292203  #>              HKQuantityTypeIdentifierBasalEnergyBurned  #>                                                 253537  #>         HKQuantityTypeIdentifierDistanceWalkingRunning  #>                                                 118161  #>                HKQuantityTypeIdentifierDistanceCycling  #>                                                  88443  #>                      HKQuantityTypeIdentifierStepCount  #>                                                  67271  #>                HKQuantityTypeIdentifierRespiratoryRate  #>                                                  25203  #>                   HKQuantityTypeIdentifierWalkingSpeed  #>                                                  24331  #>              HKQuantityTypeIdentifierWalkingStepLength  #>                                                  24330  #>                  HKCategoryTypeIdentifierSleepAnalysis  #>                                                  23878  #>              HKQuantityTypeIdentifierAppleExerciseTime  #>                                                  22383  #>                 HKQuantityTypeIdentifierAppleStandTime  #>                                                  22185  #> HKQuantityTypeIdentifierWalkingDoubleSupportPercentage  #>                                                  21580  #>                 HKCategoryTypeIdentifierAppleStandHour  #>                                                  12483  #>                 HKQuantityTypeIdentifierPhysicalEffort  #>                                                  12198"},{"path":"/articles/02_analyse_health_data.html","id":"analysing-health-data","dir":"Articles","previous_headings":"","what":"Analysing Health Data","title":"2. Analyse Health Data","text":"raw xml file exported Apple contains several dozens variables, exported rows single file. better make sense structure data, package proposes number domain-specific functions analyse specific health feature, cardiovascular data.","code":"library(health2R) library(tidyverse) library(lubridate) library(purrr) parsed_healthdata <- read_rds(\"path/to/your/health_data.rds\") parsed_healthdata$type %>% table() %>% sort(decreasing = TRUE) %>% head(10) ## . ##     HKQuantityTypeIdentifierActiveEnergyBurned  ##                                         557636  ##              HKQuantityTypeIdentifierHeartRate  ##                                         292203  ##      HKQuantityTypeIdentifierBasalEnergyBurned  ##                                         253537  ## HKQuantityTypeIdentifierDistanceWalkingRunning  ##                                         118161  ##        HKQuantityTypeIdentifierDistanceCycling  ##                                          88443  ##              HKQuantityTypeIdentifierStepCount  ##                                          67271  ##        HKQuantityTypeIdentifierRespiratoryRate  ##                                          25203  ##           HKQuantityTypeIdentifierWalkingSpeed  ##                                          24331  ##      HKQuantityTypeIdentifierWalkingStepLength  ##                                          24330  ##          HKCategoryTypeIdentifierSleepAnalysis  ##                                          23878"},{"path":"/articles/02_analyse_health_data.html","id":"analyse-heart-rate-data","dir":"Articles","previous_headings":"Analysing Health Data","what":"Analyse Heart Rate Data","title":"2. Analyse Health Data","text":"dedicated function extracting analysing cardiovascular data called get_cardio takes input already parsed healthdata object, raw zip file. Furthermore, variable var allows user pick cardio-related variable extracted, currently takes options heartrate, resting, walkingAverage, workout, variability, recovery.","code":"hr_data <- get_cardio(health_db = parsed_healthdata,                            var = \"heartrate\") hr_data %>% select(type,sourceName,unit,startDate,value) %>% head() ## # A tibble: 6 × 5 ##   type                              sourceName   unit  startDate           value ##   <chr>                             <chr>        <chr> <dttm>              <dbl> ## 1 HKQuantityTypeIdentifierHeartRate XXX ’s Appl… coun… 2022-03-28 05:55:33  69.9 ## 2 HKQuantityTypeIdentifierHeartRate XXX ’s Appl… coun… 2022-03-28 05:56:57  68   ## 3 HKQuantityTypeIdentifierHeartRate XXX ’s Appl… coun… 2022-03-28 05:53:48  70   ## 4 HKQuantityTypeIdentifierHeartRate XXX ’s Appl… coun… 2022-03-28 05:58:41  66   ## 5 HKQuantityTypeIdentifierHeartRate XXX ’s Appl… coun… 2022-03-28 06:05:40  60   ## 6 HKQuantityTypeIdentifierHeartRate XXX ’s Appl… coun… 2022-03-28 06:10:28  61 library(ggplot2)  ggplot(hr_data,         aes(x = startDate, y = value)) +      geom_text(aes(label = \"\\u2665\"), color = \"red\", size = 3) +     scale_x_datetime(limits = c(as.POSIXct(\"2022-03-29 00:00:00\"),                                 as.POSIXct(\"2022-03-29 23:59:59\")))"},{"path":"/articles/02_analyse_health_data.html","id":"analyse-vo2-max","dir":"Articles","previous_headings":"Analysing Health Data","what":"Analyse VO2-Max","title":"2. Analyse Health Data","text":"Furthermore, get_vo2max function obtains VO2-Max performance data, either full available time range (default), specific start_date end_date. can now VO2-Max (differential noise added privacy reasons): Plot smoothed trend overtime:","code":"vo2max_data <- get_vo2max(health_db = parsed_healthdata,                           start_date = as_date(\"2023-01-01\"),                            end_date = as_date(\"2023-11-01\")) private_vo2 <-    vo2max_data %>%    mutate(value = value + rnorm(1,0,10))  private_vo2 %>% head() ## # A tibble: 6 × 2 ##   startDate           value ##   <dttm>              <dbl> ## 1 2023-01-01 15:59:15  38.3 ## 2 2023-01-06 12:21:27  38.3 ## 3 2023-01-06 22:37:49  38.3 ## 4 2023-01-08 14:23:02  38.3 ## 5 2023-01-13 19:47:48  38.3 ## 6 2023-01-14 09:37:03  38.3 ggplot(private_vo2,         aes(x = startDate,             y = value)) +    geom_point() +   scale_x_datetime(limits = c(as.POSIXct(\"2023-01-29 00:00:00\"),                                 as.POSIXct(\"2023-10-01 00:00:00\")),                      date_breaks = \"1 month\",                      date_labels = \"%b %y\") +    geom_smooth() +    theme_bw() +    theme(axis.text.y = element_blank()) +    labs(x = NULL, y = NULL,        title = \"VO2-Max over time (2023)\",        subtitle = \"White noise added for additional privacy\") ## `geom_smooth()` using method = 'loess' and formula = 'y ~ x' ## Warning: Removed 27 rows containing non-finite values (`stat_smooth()`). ## Warning: Removed 27 rows containing missing values (`geom_point()`)."},{"path":"/articles/02_analyse_health_data.html","id":"analyse-menstrual-cycle","dir":"Articles","previous_headings":"Analysing Health Data","what":"Analyse Menstrual Cycle","title":"2. Analyse Health Data","text":"course, female menstrual cycles sensitive piece data, appropriate exposed online documentation. Instead plotting someone’s actual cycle data, therefore simulate random data similar format exported get_menstruation_cycle function package.","code":"menstruation_cycle_data <- get_menstruation_cycle(health_db = parsed_healthdata) set.seed(12345) # for reproducibility  # Function to simulate a single cycle simulate_cycle <- function(start_date) {   cycle_length <- sample(25:35, 1) # Random cycle length between 25 and 35 days   menstruation_length <- sample(3:6, 1) # Random menstruation length between 3 and 7 days   data.frame(     Date = seq.Date(start_date, by = \"day\", length.out = cycle_length),     Menstruation = c(rep(TRUE, menstruation_length), rep(FALSE, cycle_length - menstruation_length))   ) }  # Simulate cycles for a year simulate_year_cycles <- function(start_date, end_date) {   current_date <- start_date   all_cycles <- data.frame(Date = as.Date(character()), Menstruation = logical())      while(current_date < end_date) {     cycle <- simulate_cycle(current_date)     all_cycles <- bind_rows(all_cycles, cycle)     current_date <- max(cycle$Date) + 1   }   all_cycles %>% filter(Date <= end_date) }  # Use the function to simulate cycles between two dates start_date <- as.Date(\"2024-01-01\") end_date <- as.Date(\"2024-12-31\") simulated_menstrual_data <- simulate_year_cycles(start_date, end_date)  # Viewing the first 10 rows simulated_menstrual_data %>% slice(25:35) ##          Date Menstruation ## 1  2024-01-25        FALSE ## 2  2024-01-26        FALSE ## 3  2024-01-27        FALSE ## 4  2024-01-28         TRUE ## 5  2024-01-29         TRUE ## 6  2024-01-30         TRUE ## 7  2024-01-31         TRUE ## 8  2024-02-01         TRUE ## 9  2024-02-02         TRUE ## 10 2024-02-03        FALSE ## 11 2024-02-04        FALSE simulated_menstrual_data %>%   mutate(Month = floor_date(Date, \"month\"),           Day = day(Date)) %>%     ggplot(aes(x = Day,  y = 1,fill = Menstruation)) +    geom_tile(color = \"white\") + # Use tiles   scale_fill_manual(values = c(\"TRUE\" = \"red\", \"FALSE\" = \"grey\")) +   facet_wrap(~Month, scales = \"free_y\",               labeller = labeller(Month = function(x) format(as.Date(as.character(x), \"%Y-%m-%d\"), \"%b %Y\"))) +  # Custom labels   labs(fill = \"Menstruation\", x = \"Day of the Month\", y = \"\") +    theme(axis.text.y = element_blank(),          strip.text.y = element_text(angle = 0))"},{"path":"/articles/03_differential_privacy.html","id":"adding-differential-privacy","dir":"Articles","previous_headings":"","what":"Adding Differential Privacy","title":"3. Add Differential Privacy","text":"Health data data can repesent quite sensitive pieces information, cases avoided leaked inappropriate context. still able use one’s wearable data, health2R package provides function called add_differential_privacy, takes duration object input variable max_differential_privacy_offset, subsequently makes data frame differentially private adding random noise time stamps data, retaining relationship respective time data. First plot example heart rate data: differentially privat data, privatized random noise addition 2 days. duration object parameter can also hold shorter periods appropriate, e.g. duration(3600,\"seconds\") similar. Plotting two time series shows successful addition obfuscating noise:","code":"library(health2R) library(tidyverse) library(lubridate) parsed_healthdata <- read_rds(\"path/to/your/health_data.rds\") rhr_data <- get_cardio(health_db = parsed_healthdata,                            var = \"heartrate\",                        start_date = as_date(\"2023-02-28\"),                        end_date = as_date(\"2023-03-02\")) rhr_data %>%    select(type,sourceName,unit,startDate,value) %>%    head() ## # A tibble: 6 × 5 ##   type                              sourceName   unit  startDate           value ##   <chr>                             <chr>        <chr> <dttm>              <dbl> ## 1 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 00:00:07    64 ## 2 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 00:07:58    67 ## 3 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 00:04:57    66 ## 4 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 00:13:59    55 ## 5 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 00:15:53    64 ## 6 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 00:21:58    63 priv_data <-    rhr_data %>%   select(type,sourceName,unit,startDate,value) %>%    add_differential_privacy(max_differential_privacy_offset = lubridate::duration(2,\"days\"))   priv_data %>% head() ## # A tibble: 6 × 5 ##   type                              sourceName   unit  startDate           value ##   <chr>                             <chr>        <chr> <dttm>              <dbl> ## 1 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 19:39:28    64 ## 2 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 19:47:19    67 ## 3 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 19:44:18    66 ## 4 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 19:53:20    55 ## 5 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 19:55:14    64 ## 6 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 20:01:19    63 combined_data <- bind_rows(rhr_data %>% mutate(type = \"baseline_data\"),                         priv_data %>% mutate(type = \"differentially_private_data\"))  ggplot(combined_data,        aes(x = startDate,            y = value,             col = type)) +    geom_line() +   facet_wrap(~type,nrow = 2) +    scale_x_datetime(date_breaks = \"1 day\",                    date_labels = \"%b %d %H:%M UTC\")  +    theme(axis.text.x = element_text(angle = 45,vjust = 1,hjust = 1))"},{"path":"/articles/04_analyse_workout_data.html","id":"plotting-workouts","dir":"Articles","previous_headings":"","what":"Plotting Workouts","title":"4. Analyse Workout Data","text":"final function family allows user analyse visualise workout data parsing respective gpx format provided apple. first load list workouts previously parsed vignette(\"01_import_apple_data\") pick one specific workout: leak specific protected location, one’s home, create function removes first last x minutes workout: can plot workout respective velocity:  plot workout real city map Berlin, use d6berlin package:","code":"library(health2R) library(tidyverse) library(lubridate) library(sf) parsed_workouts <-    readRDS(file.path(\"path/to/workouts/rds\")) workout_data <- parsed_workouts$`Route 2023-10-08 12:35pm`  sf_data <- workout_data %>%     st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326) %>%     st_transform(crs = 3857) # Using Web Mercator for visualization remove_start_end <- function(sf_data, minutes) {   # Convert 'minutes' to seconds since the 'time' column is in POSIXct   seconds <- minutes * 60      # Get the start and end time   start_time <- min(sf_data$time)   end_time <- max(sf_data$time)      # Calculate the time limits   start_limit <- start_time + seconds   end_limit <- end_time - seconds      # Filter the data to exclude points within the first and last x minutes   sf_data_filtered <- sf_data %>%     filter(time > start_limit & time < end_limit)      return(sf_data_filtered) } sf_data_obscured <- remove_start_end(sf_data, minutes = 5) ggplot(data = sf_data_obscured) +   geom_sf(aes(color = speed), size = 1, alpha = 0.7) +    scale_color_viridis_c(name = \"Speed (m/s)\",                          option = \"C\",                          limits = range(sf_data$speed, na.rm = TRUE)) +   theme_minimal() +   labs(title = \"Workout Route with Speed Dynamics\",        x = \"Longitude\",        y = \"Latitude\") +   theme(legend.position = \"right\") #devtools::install_github(\"EcoDynIZW/d6berlin\") library(d6berlin) base_map <- base_map_imp(color_intensity = 1, resolution = 500, globe = TRUE)  # Combine the base map with your data berlin_map <-    base_map +   geom_sf(data = sf_data_obscured, aes(color = speed), col = \"red\",size = 1, alpha = 0.7) +   labs(title = \"Workout Route with Speed Dynamics\")+    guides(color = FALSE)  # Print the combined map print(berlin_map)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mariana Patino. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Patino M (2023). health2R: Import, Parse, Analyse Health/Wearables Data R. R package version 1.0, https://github.com/marianapatino/health2R/.","code":"@Manual{,   title = {health2R: Import, Parse, and Analyse Health/Wearables Data in R},   author = {Mariana Patino},   year = {2023},   note = {R package version 1.0},   url = {https://github.com/marianapatino/health2R/}, }"},{"path":"/index.html","id":"health2r-","dir":"","previous_headings":"","what":"Import, Parse, and Analyse Health/Wearables Data in R","title":"Import, Parse, and Analyse Health/Wearables Data in R","text":"ReadMe contains overview important functions health2R package. full documentation respective functions can found function vignettes: Import Apple Health Data: vignette(\"01_import_apple_data\") Analyse Health Data: vignette(\"02_analyse_health_data\") Add Differential Privacy: vignette(\"03_differential_privacy\") Analyse Workout Data: vignette(\"04_analyse_workout_data\")","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Import, Parse, and Analyse Health/Wearables Data in R","text":"package can installed Github:","code":"githubinstall::install_github(\"marianapatino/health2R\")"},{"path":"/index.html","id":"importing-data","dir":"","previous_headings":"","what":"Importing Data","title":"Import, Parse, and Analyse Health/Wearables Data in R","text":"Apple Health data stored large xml files can exported zip file, tens millions rows (e.g. many data types, health data logged stored second level). Therefore, import_healthdata import_workouts functions take exported zip file input parse R data format. Due large amount rows, can take several minutes, therefore done per updated health file, can subsequently stored rds csv file.","code":""},{"path":"/index.html","id":"importing-health-data","dir":"","previous_headings":"Importing Data","what":"Importing Health Data","title":"Import, Parse, and Analyse Health/Wearables Data in R","text":"First, import, parse save example dataset health data. dynamic progress bar tracks progress parsing process.  get first overview, sample random subset 5 rows parsed data frame: parsing complete, store parsed file ´rds´ file:","code":"library(health2R)  parsed_healthdata <-    import_healthdata(filename = \"../dev/data/mp_export.zip\",                     datasource = \"apple\") parsed_healthdata %>%    sample_n(5) #> # A tibble: 5 × 9 #>   type                 sourceName sourceVersion unit  device startDate           #>   <chr>                <chr>      <chr>         <chr> <chr>  <dttm>              #> 1 HKQuantityTypeIdent… Mariana ’… 9.1           count <<HKD… 2022-12-18 07:51:12 #> 2 HKQuantityTypeIdent… Mariana ’… 9.3.1         count <<HKD… 2023-05-05 23:23:32 #> 3 HKQuantityTypeIdent… Mariana ’… 10.0          coun… <<HKD… 2023-10-03 09:06:01 #> 4 HKQuantityTypeIdent… Mariana ’… 9.5.1         kcal  <<HKD… 2023-06-20 16:07:06 #> 5 HKQuantityTypeIdent… Mariana ’… 9.6.1         kcal  <<HKD… 2023-08-26 15:01:33 #> # ℹ 3 more variables: endDate <dttm>, creationDate <dttm>, value <chr> saveRDS(parsed_healthdata,         \"../dev/data/parsed_healthdata_mp.rds\")"},{"path":"/index.html","id":"importing-workout-data","dir":"","previous_headings":"Importing Data","what":"Importing Workout Data","title":"Import, Parse, and Analyse Health/Wearables Data in R","text":"Similarly, import_workouts function imports workouts list gpx data, name individual list entries route name.","code":"parsed_workouts <-    import_workouts(filename = \"../dev/data/mp_export.zip\",                   datasource = \"apple\")  saveRDS(parsed_workouts,         \"../dev/data/parsed_apple_workouts_mp.rds\") parsed_workouts[1] %>%   map(~ .x %>% head(5)) #> $`Route 2022-03-28 9:23pm` #> # A tibble: 5 × 8 #>     lat   lon   ele time                 speed course  hAcc  vAcc #>   <dbl> <dbl> <dbl> <dttm>               <dbl>  <dbl> <dbl> <dbl> #> 1  10.5 -84.8  633. 2022-03-28 17:54:24 0.689    46.3  1.75  1.74 #> 2  10.5 -84.8  633. 2022-03-28 17:54:25 0.714    50.0  1.56  1.53 #> 3  10.5 -84.8  634. 2022-03-28 17:54:26 0.355    43.9  1.47  1.36 #> 4  10.5 -84.8  634. 2022-03-28 17:54:27 0.146    23.7  1.43  1.23 #> 5  10.5 -84.8  634. 2022-03-28 17:54:28 0.0933  354.   1.42  1.12"},{"path":"/index.html","id":"analyse-health-data","dir":"","previous_headings":"","what":"Analyse Health Data","title":"Import, Parse, and Analyse Health/Wearables Data in R","text":"parsed saved data rds files, can read analysed.","code":"parsed_healthdata <-    readRDS(file.path(\"PATH_TO_RDS/parsed_healthdata_mp.rds\"))  parsed_workouts <-    readRDS(file.path(\"PATH_TO_RDS/parsed_apple_workouts_mp.rds\"))"},{"path":"/index.html","id":"analyse-heart-rate-data","dir":"","previous_headings":"Analyse Health Data","what":"Analyse Heart Rate Data","title":"Import, Parse, and Analyse Health/Wearables Data in R","text":"dedicated function extracting analysing cardiovascular data called get_cardio takes input already parsed healthdata object, raw zip file. Furthermore, variable var allows user pick cardio-related variable extracted, currently takes options heartrate, resting, walkingAverage, workout, variability, recovery.","code":"hr_data <- get_cardio(health_db = parsed_healthdata,                            var = \"heartrate\") hr_data %>% select(type,sourceName,unit,startDate,value) %>% head() #> # A tibble: 6 × 5 #>   type                              sourceName   unit  startDate           value #>   <chr>                             <chr>        <chr> <dttm>              <dbl> #> 1 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2022-03-28 05:55:33  69.9 #> 2 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2022-03-28 05:56:57  68   #> 3 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2022-03-28 05:53:48  70   #> 4 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2022-03-28 05:58:41  66   #> 5 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2022-03-28 06:05:40  60   #> 6 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2022-03-28 06:10:28  61 library(ggplot2)  ggplot(hr_data,         aes(x = startDate, y = value)) +      geom_text(aes(label = \"\\u2665\"), color = \"red\", size = 3) +     scale_x_datetime(limits = c(as.POSIXct(\"2022-03-29 00:00:00\"),                                 as.POSIXct(\"2022-03-29 23:59:59\")))"},{"path":"/index.html","id":"analyse-vo2-max","dir":"","previous_headings":"Analyse Health Data","what":"Analyse VO2-Max","title":"Import, Parse, and Analyse Health/Wearables Data in R","text":"Furthermore, get_vo2max function obtains VO2-Max performance data, either full available time range (default), specific start_date end_date. can now VO2-Max (differential noise added privacy reasons): Plot smoothed trend overtime:","code":"vo2max_data <- get_vo2max(health_db = parsed_healthdata,                           start_date = as_date(\"2023-01-01\"),                            end_date = as_date(\"2023-11-01\")) private_vo2 <-    vo2max_data %>%    mutate(value = value + rnorm(1,0,10)) ggplot(private_vo2,         aes(x = startDate,             y = value)) +    geom_point() +   scale_x_datetime(limits = c(as.POSIXct(\"2023-01-29 00:00:00\"),                                 as.POSIXct(\"2023-10-01 00:00:00\")),                      date_breaks = \"1 month\",                      date_labels = \"%b %y\") +    geom_smooth() +    theme_bw() +    theme(axis.text.y = element_blank()) +    labs(x = NULL, y = NULL,        title = \"VO2-Max over time (2023)\",        subtitle = \"White noise added for additional privacy\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' #> Warning: Removed 27 rows containing non-finite values (`stat_smooth()`). #> Warning: Removed 27 rows containing missing values (`geom_point()`)."},{"path":"/index.html","id":"analyse-menstrual-cycle","dir":"","previous_headings":"Analyse Health Data","what":"Analyse Menstrual Cycle","title":"Import, Parse, and Analyse Health/Wearables Data in R","text":"course, female menstrual cycles sensitive piece data, appropriate exposed online documentation. Instead plotting someone’s actual cycle data, therefore simulate random data similar format exported get_menstruation_cycle function package. details source code simulate_year_cycles function, please refer vignette vignette(\"02_analyse_health_data\").","code":"menstruation_cycle_data <- get_menstruation_cycle(health_db = parsed_healthdata) set.seed(12345) # for reproducibility  # Use the function to simulate cycles between two dates start_date <- as.Date(\"2024-01-01\") end_date <- as.Date(\"2024-12-31\") simulated_menstrual_data <- simulate_year_cycles(start_date, end_date) simulated_menstrual_data %>%   mutate(Month = floor_date(Date, \"month\"),           Day = day(Date)) %>%     ggplot(aes(x = Day,  y = 1,fill = Menstruation)) +    geom_tile(color = \"white\") + # Use tiles   scale_fill_manual(values = c(\"TRUE\" = \"red\", \"FALSE\" = \"grey\")) +   facet_wrap(~Month, scales = \"free_y\",               labeller = labeller(Month = function(x) format(as.Date(as.character(x), \"%Y-%m-%d\"), \"%b %Y\"))) +  # Custom labels   labs(fill = \"Menstruation\", x = \"Day of the Month\", y = \"\") +    theme(axis.text.y = element_blank(),          strip.text.y = element_text(angle = 0))"},{"path":"/index.html","id":"adding-differential-privacy","dir":"","previous_headings":"","what":"Adding Differential Privacy","title":"Import, Parse, and Analyse Health/Wearables Data in R","text":"Health data data can repesent quite sensitive pieces information, cases avoided leaked inappropriate context. still able use one’s wearable data, health2R package provides function called add_differential_privacy, takes duration object input variable max_differential_privacy_offset, subsequently makes data frame differentially private adding random noise time stamps data, retaining relationship respective time data. First plot example heart rate data: differentially privat data, privatized random noise addition 2 days. duration object parameter can also hold shorter periods appropriate, e.g. duration(3600,\"seconds\") similar. Plotting two time series shows successful addition obfuscating noise:","code":"library(health2R) library(tidyverse) library(lubridate) parsed_healthdata <- read_rds(\"path/to/your/health_data.rds\") rhr_data <- get_cardio(health_db = parsed_healthdata,                            var = \"heartrate\",                        start_date = as_date(\"2023-02-28\"),                        end_date = as_date(\"2023-03-02\")) rhr_data %>%    select(type,sourceName,unit,startDate,value) %>%    head(3) #> # A tibble: 3 × 5 #>   type                              sourceName   unit  startDate           value #>   <chr>                             <chr>        <chr> <dttm>              <dbl> #> 1 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 00:00:07    64 #> 2 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 00:07:58    67 #> 3 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-28 00:04:57    66 priv_data <-    rhr_data %>%   select(type,sourceName,unit,startDate,value) %>%    add_differential_privacy(max_differential_privacy_offset = lubridate::duration(2,\"days\"))   priv_data %>% head(3) #> # A tibble: 3 × 5 #>   type                              sourceName   unit  startDate           value #>   <chr>                             <chr>        <chr> <dttm>              <dbl> #> 1 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-27 03:01:38    64 #> 2 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-27 03:09:29    67 #> 3 HKQuantityTypeIdentifierHeartRate Mariana ’s … coun… 2023-02-27 03:06:28    66 combined_data <- bind_rows(rhr_data %>% mutate(type = \"baseline_data\"),                         priv_data %>% mutate(type = \"differentially_private_data\"))  ggplot(combined_data,        aes(x = startDate,            y = value,             col = type)) +    geom_line() +   facet_wrap(~type,nrow = 2) +    scale_x_datetime(date_breaks = \"1 day\",                    date_labels = \"%b %d %H:%M UTC\")  +    theme(axis.text.x = element_text(angle = 45,vjust = 1,hjust = 1))"},{"path":"/index.html","id":"plotting-workout-data","dir":"","previous_headings":"","what":"Plotting Workout Data","title":"Import, Parse, and Analyse Health/Wearables Data in R","text":"first load list workouts previously parsed vignette(\"01_import_apple_data\") pick one specific workout: leak specific protected location, one’s home, use function remove_start_end removes first last x minutes workout: can plot workout respective velocity:  plot workout real city map Berlin, use d6berlin package:","code":"#devtools::install_github(\"EcoDynIZW/d6berlin\") library(d6berlin) library(lubridate) library(sf) #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE parsed_workouts <-    readRDS(file.path(\"path/to/workouts/rds\")) workout_data <- parsed_workouts$`Route 2023-10-08 12:35pm`  sf_data <- workout_data %>%     st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326) %>%     st_transform(crs = 3857) # Using Web Mercator for visualization sf_data_obscured <- remove_start_end(sf_data, minutes = 5) ggplot(data = sf_data_obscured) +   geom_sf(aes(color = speed), size = 1, alpha = 0.7) +    scale_color_viridis_c(name = \"Speed (m/s)\",                          option = \"C\",                          limits = range(sf_data$speed, na.rm = TRUE)) +   theme_minimal() +   labs(title = \"Workout Route with Speed Dynamics\",        x = \"Longitude\",        y = \"Latitude\") +   theme(legend.position = \"right\") base_map <- base_map_imp(color_intensity = 1, resolution = 500, globe = TRUE)  # Combine the base map with your data berlin_map <-    base_map +   geom_sf(data = sf_data_obscured, aes(color = speed), col = \"red\",size = 1, alpha = 0.7) +   labs(title = \"Workout Route with Speed Dynamics\")+    guides(color = FALSE)  # Print the combined map print(berlin_map)"},{"path":"/reference/add_differential_privacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Differential Privacy to Timestamps by Column Type — add_differential_privacy","title":"Add Differential Privacy to Timestamps by Column Type — add_differential_privacy","text":"function detects timestamp columns dataframe based type adds random time offset provide differential privacy. offset preserves relationship timestamps obscures actual times.","code":""},{"path":"/reference/add_differential_privacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Differential Privacy to Timestamps by Column Type — add_differential_privacy","text":"","code":"add_differential_privacy(   data,   max_differential_privacy_offset = duration(1, \"days\") )"},{"path":"/reference/add_differential_privacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Differential Privacy to Timestamps by Column Type — add_differential_privacy","text":"data dataframe containing data potential timestamp columns. max_offset_seconds maximum number seconds random time offset. Default 86400 (24 hours).","code":""},{"path":"/reference/add_differential_privacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Differential Privacy to Timestamps by Column Type — add_differential_privacy","text":"dataframe timestamp columns adjusted differential privacy.","code":""},{"path":"/reference/add_differential_privacy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Differential Privacy to Timestamps by Column Type — add_differential_privacy","text":"","code":"if (FALSE) {   library(tidyverse)   # Assuming your dataframe is named 'df'   private_data <- add_privacy_to_timestamps_autotype(df, max_offset_seconds = 3600) # 1-hour max offset }"},{"path":"/reference/add_privacy_to_timestamps.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Differential Privacy to Timestamps by Column Type — add_privacy_to_timestamps","title":"Add Differential Privacy to Timestamps by Column Type — add_privacy_to_timestamps","text":"function detects timestamp columns dataframe based type adds random time offset provide differential privacy. offset preserves relationship timestamps obscures actual times.","code":""},{"path":"/reference/add_privacy_to_timestamps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Differential Privacy to Timestamps by Column Type — add_privacy_to_timestamps","text":"","code":"add_privacy_to_timestamps(data, max_offset_seconds = 86400)"},{"path":"/reference/add_privacy_to_timestamps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Differential Privacy to Timestamps by Column Type — add_privacy_to_timestamps","text":"data dataframe containing data potential timestamp columns. max_offset_seconds maximum number seconds random time offset. Default 86400 (24 hours).","code":""},{"path":"/reference/add_privacy_to_timestamps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Differential Privacy to Timestamps by Column Type — add_privacy_to_timestamps","text":"dataframe timestamp columns adjusted differential privacy.","code":""},{"path":"/reference/add_privacy_to_timestamps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Differential Privacy to Timestamps by Column Type — add_privacy_to_timestamps","text":"","code":"if (FALSE) {   library(tidyverse)   # Assuming your dataframe is named 'df'   private_data <- add_privacy_to_timestamps_autotype(df, max_offset_seconds = 3600) # 1-hour max offset }"},{"path":"/reference/get_cardio.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Cardiovascular Data from Apple Health Database — get_cardio","title":"Get Cardiovascular Data from Apple Health Database — get_cardio","text":"function extracts heart rate data specified type time frame Apple Health Database, either passed dataframe loaded RDS file.","code":""},{"path":"/reference/get_cardio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Cardiovascular Data from Apple Health Database — get_cardio","text":"","code":"get_cardio(   health_db,   type = \"HKQuantityTypeIdentifierHeartRate\",   var = NULL,   start_date = NULL,   end_date = NULL )"},{"path":"/reference/get_cardio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Cardiovascular Data from Apple Health Database — get_cardio","text":"health_db dataframe path RDS file containing health data. type type heart rate data extract, default \"HKQuantityTypeIdentifierHeartRate\". var short label common heart rate data types alternative 'type' parameter. start_date start time frame extract data. end_date end time frame extract data.","code":""},{"path":"/reference/get_cardio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Cardiovascular Data from Apple Health Database — get_cardio","text":"dataframe containing filtered heart rate data.","code":""},{"path":"/reference/get_cardio.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get Cardiovascular Data from Apple Health Database — get_cardio","text":"Available types : \"heartrate\", \"resting\", \"walkingAverage\", \"workout\", \"variability\", \"recovery\"","code":""},{"path":"/reference/get_cardio.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Cardiovascular Data from Apple Health Database — get_cardio","text":"Use Apple Health documentation reference data structure.","code":""},{"path":"/reference/get_cardio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Cardiovascular Data from Apple Health Database — get_cardio","text":"","code":"if (FALSE) {   library(tidyverse)   health_data <- read_rds(\"path/to/your/health_data.rds\")   cardio_data <- get_cardio(health_db = health_data, var = \"heartrate\") }"},{"path":"/reference/get_menstruation_cycle.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Menstruation Cycle Data from Apple Health Database — get_menstruation_cycle","title":"Get Menstruation Cycle Data from Apple Health Database — get_menstruation_cycle","text":"function identifies menstruation periods Apple Health Database, either passed dataframe loaded RDS file, returns dataframe complete sequence dates flag indicating menstruation days within range menstruation data exists.","code":""},{"path":"/reference/get_menstruation_cycle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Menstruation Cycle Data from Apple Health Database — get_menstruation_cycle","text":"","code":"get_menstruation_cycle(   health_db,   type = \"HKCategoryTypeIdentifierMenstrualFlow\",   start_date = NULL,   end_date = NULL )"},{"path":"/reference/get_menstruation_cycle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Menstruation Cycle Data from Apple Health Database — get_menstruation_cycle","text":"health_db dataframe path RDS file containing health data. type type menstruation data extract, default \"HKCategoryTypeIdentifierMenstrualFlow\". start_date start time frame extract data. end_date end time frame extract data.","code":""},{"path":"/reference/get_menstruation_cycle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Menstruation Cycle Data from Apple Health Database — get_menstruation_cycle","text":"dataframe sequence dates flag menstruation days.","code":""},{"path":"/reference/get_menstruation_cycle.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get Menstruation Cycle Data from Apple Health Database — get_menstruation_cycle","text":"function assumes health data UTC time zone menstruation data includes 'startDate' 'endDate'.","code":""},{"path":"/reference/get_menstruation_cycle.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Menstruation Cycle Data from Apple Health Database — get_menstruation_cycle","text":"Use Apple Health documentation reference data structure.","code":""},{"path":"/reference/get_menstruation_cycle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Menstruation Cycle Data from Apple Health Database — get_menstruation_cycle","text":"","code":"if (FALSE) {   library(tidyverse)   health_data <- read_rds(\"path/to/your/health_data.rds\")   menstruation_cycle_data <- get_menstruation_cycle(health_db = health_data) }"},{"path":"/reference/get_vo2max.html","id":null,"dir":"Reference","previous_headings":"","what":"Get VO2Max Data from Apple Health Database — get_vo2max","title":"Get VO2Max Data from Apple Health Database — get_vo2max","text":"function extracts VO2Max data specified time frame Apple Health Database, either passed dataframe loaded RDS file.","code":""},{"path":"/reference/get_vo2max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get VO2Max Data from Apple Health Database — get_vo2max","text":"","code":"get_vo2max(health_db, start_date = NULL, end_date = NULL)"},{"path":"/reference/get_vo2max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get VO2Max Data from Apple Health Database — get_vo2max","text":"health_db dataframe path RDS file containing health data. start_date start time frame extract VO2Max data. end_date end time frame extract VO2Max data.","code":""},{"path":"/reference/get_vo2max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get VO2Max Data from Apple Health Database — get_vo2max","text":"dataframe containing filtered VO2Max data.","code":""},{"path":"/reference/get_vo2max.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get VO2Max Data from Apple Health Database — get_vo2max","text":"function assumes health data local time zone data source.","code":""},{"path":"/reference/get_vo2max.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get VO2Max Data from Apple Health Database — get_vo2max","text":"Use Apple Health documentation reference data structure.","code":""},{"path":"/reference/get_vo2max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get VO2Max Data from Apple Health Database — get_vo2max","text":"","code":"if (FALSE) {   library(tidyverse)   health_data <- read_rds(\"path/to/your/health_data.rds\")   vo2max_data <- get_vo2max(health_db = health_data) }"},{"path":"/reference/import_healthdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Import and Parse Apple Health Data from Zip Archive — import_healthdata","title":"Import and Parse Apple Health Data from Zip Archive — import_healthdata","text":"function extracts parses health data Apple Health Data zip file. reads contained XML file, parses health records, returns data frame health data.","code":""},{"path":"/reference/import_healthdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import and Parse Apple Health Data from Zip Archive — import_healthdata","text":"","code":"import_healthdata(filename, datasource = \"apple\")"},{"path":"/reference/import_healthdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import and Parse Apple Health Data from Zip Archive — import_healthdata","text":"filename path zip file containing Apple Health Export data. datasource source health data, default set 'apple'. Currently, Apple Health data supported.","code":""},{"path":"/reference/import_healthdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import and Parse Apple Health Data from Zip Archive — import_healthdata","text":"data frame containing health data appropriate data types date-time numeric fields.","code":""},{"path":"/reference/import_healthdata.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import and Parse Apple Health Data from Zip Archive — import_healthdata","text":"important notes user","code":""},{"path":"/reference/import_healthdata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Import and Parse Apple Health Data from Zip Archive — import_healthdata","text":"Add references applicable","code":""},{"path":"/reference/import_healthdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import and Parse Apple Health Data from Zip Archive — import_healthdata","text":"","code":"# Assuming 'healthdata.zip' is the Apple Health Export zip file in the working directory: if (FALSE) { options(tidyverse.quiet = TRUE) library(tidyverse) library(xml2) library(lubridate) health_data <- import_healthdata(filename = \"healthdata.zip\") }"},{"path":"/reference/import_workouts.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Workout Data from Apple Health Export — import_workouts","title":"Import Workout Data from Apple Health Export — import_workouts","text":"function processes Apple Health Export data specified zip file. extracts GPS data GPX files within zip archive, parses GPX data, compiles named list tibbles tibble represents workout session.","code":""},{"path":"/reference/import_workouts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Workout Data from Apple Health Export — import_workouts","text":"","code":"import_workouts(filename, datasource = \"apple\")"},{"path":"/reference/import_workouts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Workout Data from Apple Health Export — import_workouts","text":"filename path zip file containing Apple Health Export data. datasource source health data, default set 'apple'.","code":""},{"path":"/reference/import_workouts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Workout Data from Apple Health Export — import_workouts","text":"named list tibbles tibble contains columns latitude (lat), longitude (lon), elevation (ele), time, speed, course, horizontal accuracy (hAcc), vertical accuracy (vAcc). names list elements correspond names workout routes.","code":""},{"path":"/reference/import_workouts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Workout Data from Apple Health Export — import_workouts","text":"","code":"# Assuming 'workouts.zip' is the Apple Health Export zip file in the working directory: workout_data <- parse_workouts(filename = \"workouts.zip\") #> Error in parse_workouts(filename = \"workouts.zip\"): could not find function \"parse_workouts\""},{"path":"/reference/parse_gpx.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Function to Parse GPX Files — parse_gpx","title":"Internal Function to Parse GPX Files — parse_gpx","text":"function reads GPX file extracts GPS track information including latitude, longitude, elevation, time, speed, course, horizontal accuracy, vertical accuracy.","code":""},{"path":"/reference/parse_gpx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Function to Parse GPX Files — parse_gpx","text":"","code":"parse_gpx(file_path)"},{"path":"/reference/parse_gpx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Function to Parse GPX Files — parse_gpx","text":"file_path path GPX file parsed.","code":""},{"path":"/reference/parse_gpx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Function to Parse GPX Files — parse_gpx","text":"list containing route name tibble GPX data.","code":""},{"path":"/reference/parse_gpx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal Function to Parse GPX Files — parse_gpx","text":"","code":"if (FALSE) { gpx_data <- parse_gpx(\"path/to/your/file.gpx\") route_name <- gpx_data$route_name track_points <- gpx_data$gpx_data }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""}]
